# coding: utf-8

"""
    Version 3 of CANDY HOUSEâ€™s Sesame API

    We use RESTful API to provide basic manipulation of the Sesame smart lock, including: * Get Sesame lock/unlock status * Get battery status * Lock and unlock Sesame * Sync Sesame status * Get results for lock, unlock, and sync commands   # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: sesame@candyhouse.co
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'responsive': 'bool',
        'locked': 'bool',
        'battery': 'int'
    }

    attribute_map = {
        'responsive': 'responsive',
        'locked': 'locked',
        'battery': 'battery'
    }

    def __init__(self, responsive=None, locked=None, battery=None):  # noqa: E501
        """InlineResponse2001 - a model defined in OpenAPI"""  # noqa: E501

        self._responsive = None
        self._locked = None
        self._battery = None
        self.discriminator = None

        self.responsive = responsive
        self.locked = locked
        self.battery = battery

    @property
    def responsive(self):
        """Gets the responsive of this InlineResponse2001.  # noqa: E501

        Sesame is responsive now or not  # noqa: E501

        :return: The responsive of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._responsive

    @responsive.setter
    def responsive(self, responsive):
        """Sets the responsive of this InlineResponse2001.

        Sesame is responsive now or not  # noqa: E501

        :param responsive: The responsive of this InlineResponse2001.  # noqa: E501
        :type: bool
        """
        if responsive is None:
            raise ValueError("Invalid value for `responsive`, must not be `None`")  # noqa: E501

        self._responsive = responsive

    @property
    def locked(self):
        """Gets the locked of this InlineResponse2001.  # noqa: E501

        Sesame is locked or not  # noqa: E501

        :return: The locked of this InlineResponse2001.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse2001.

        Sesame is locked or not  # noqa: E501

        :param locked: The locked of this InlineResponse2001.  # noqa: E501
        :type: bool
        """
        if locked is None:
            raise ValueError("Invalid value for `locked`, must not be `None`")  # noqa: E501

        self._locked = locked

    @property
    def battery(self):
        """Gets the battery of this InlineResponse2001.  # noqa: E501

        Sesame battery status  # noqa: E501

        :return: The battery of this InlineResponse2001.  # noqa: E501
        :rtype: int
        """
        return self._battery

    @battery.setter
    def battery(self, battery):
        """Sets the battery of this InlineResponse2001.

        Sesame battery status  # noqa: E501

        :param battery: The battery of this InlineResponse2001.  # noqa: E501
        :type: int
        """
        if battery is None:
            raise ValueError("Invalid value for `battery`, must not be `None`")  # noqa: E501

        self._battery = battery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
